end = links$end2,
seq_id2 = links$seq_id,
start2 = links$start,
end2 = links$end,
hom = 1-links$de)
p <- gggenomes(seqs = s0, genes = x, links = l0)
plot <- p +
geom_seq() +         # draw contig/chromosome lines
geom_bin_label() +  # draw contig/chromosome lines
geom_gene() +        # draw genes as arrow
geom_link(aes(fill=hom), color = "snow2", offset = 0.05) +  # draw some connections between syntenic regions
scale_fill_gradient(name = "Sequence Homology",low = "snow1", high = "snow2") # color is based on sequence homology
}
if ( exists("plot") == TRUE) {
return (plot)
}
}
# Function to check if a package is installed, and if not, install it.
package_install <- function(package_name) {
if (requireNamespace(package_name, quietly = TRUE)) {
library(package_name, character.only = TRUE)
} else {
print(sprintf("%s %s", package_name, "is not installed. Installing it!"))
is_available <- BiocManager::available(package_name)
if (any(is_available == "TRUE")) {
BiocManager::install(package_name, dependencies = TRUE, update = TRUE)
} else {
install.packages(package_name, dependencies = TRUE, reinstall = TRUE)
}
}
}
# Load required packages or install them if necessary
dependencies <- c(
"ape", "phytools", "treeio", "TreeTools", "ggstar",
"ggtree", "ggplot2", "dplyr", "stringi", "stringr"
)
for (pkg in dependencies) {
package_install(pkg)
}
# Load required packages or install them if necessary
dependencies <- c(
"R6",
"ape", "phytools", "treeio", "TreeTools", "ggstar",
"ggtree", "ggplot2", "dplyr", "stringi", "stringr"
)
# Load required packages or install them if necessary
dependencies <- c(
"ape", "phytools", "treeio", "TreeTools", "ggstar",
"ggtree", "ggplot2", "dplyr", "stringi", "stringr"
)
for (pkg in dependencies) {
package_install(pkg)
}
#Library of functions for advanced tree manipulation and visualization using ggtree, ape, phytools, and other related tools.
# Function to check if a package is installed, and if not, install it.
package_install <- function(package_name) {
if (requireNamespace(package_name, quietly = TRUE)) {
library(package_name, character.only = TRUE)
} else {
print(sprintf("%s %s", package_name, "is not installed. Installing it!"))
is_available <- BiocManager::available(package_name)
if (any(is_available == "TRUE")) {
BiocManager::install(package_name, dependencies = TRUE, update = TRUE)
} else {
install.packages(package_name, dependencies = TRUE, reinstall = TRUE)
}
}
}
# Load required packages or install them if necessary
dependencies <- c(
"ape", "phytools", "treeio", "TreeTools", "ggstar",
"ggtree", "ggplot2", "dplyr", "stringi", "stringr"
)
for (pkg in dependencies) {
package_install(pkg)
}
for (pkg in dependencies) {
package_install(pkg)
}
for (pkg in dependencies) {
package_install(pkg)
}
#Library of functions for advanced tree manipulation and visualization using ggtree, ape, phytools, and other related tools.
install.packages("remotes")
library("remotes")
# Function to check if a package is installed, and if not, install it.
package_install <- function(package_name) {
if (requireNamespace(package_name, quietly = TRUE)) {
library(package_name, character.only = TRUE)
} else {
print(sprintf("%s %s", package_name, "is not installed. Installing it!"))
is_available <- BiocManager::available(package_name)
#if (any(is_available == "TRUE")) {
# BiocManager::install(package_name, dependencies = TRUE, update = TRUE)
#  } else {
install_deps(dependencies)
# install.packages(package_name, dependencies = TRUE, reinstall = TRUE)
}
}
# Load required packages or install them if necessary
dependencies <- c(
"ape", "phytools", "treeio", "TreeTools", "ggstar",
"ggtree", "ggplot2", "dplyr", "stringi", "stringr"
)
for (pkg in dependencies) {
package_install(pkg)
}
# Function to check if a package is installed, and if not, install it.
package_install <- function(package_name) {
if (requireNamespace(package_name, quietly = TRUE)) {
library(package_name, character.only = TRUE)
} else {
print(sprintf("%s %s", package_name, "is not installed. Installing it!"))
is_available <- BiocManager::available(package_name)
if (any(is_available == "TRUE")) {
BiocManager::install(package_name, dependencies = TRUE, update = TRUE)
} else {
install_deps(dependencies)
# install.packages(package_name, dependencies = TRUE, reinstall = TRUE)
}
}
}
# Load required packages or install them if necessary
dependencies <- c(
"ape", "phytools", "treeio", "TreeTools", "ggstar",
"ggtree", "ggplot2", "dplyr", "stringi", "stringr"
)
for (pkg in dependencies) {
package_install(pkg)
}
install.packages(pkg)
for (pkg in dependencies) {
install.packages(pkg)
}
for (pkg in dependencies) {
install.packages(pkg, dependencies = TRUE)
}
repos <- c("remotes", "BiocManager")
##Library to visualize genome clusters using gggenomes
package_install <- function ( package_name ) {
if (requireNamespace(package_name, quietly = TRUE)) {
library(package_name, character.only = TRUE)
}
else {
print ( (sprintf("%s %s",package_name, "is not installed. Installing it!")))
if ( package_name %in% BiocManager::available() ) {
BiocManager::install(package_name)
}
else {
install.packages(package_name)
}
}
}
dependencies <- c("tidyverse","dplyr","tibble","gggenomes")
for (i in dependencies) {
package_install(i)
}
BiocManager::install("gggenomes", dependencies = TRUE)
# if you don't have it
install.packages("devtools")
# if you don't have it
install.packages("devtools")
# if you don't have it
install.packages("devtools", dependencies = TRUE)
# if you don't have it
install.packages("callr", dependencies = TRUE)
# if you don't have it
install.packages("asciicast", dependencies = TRUE)
# if you don't have it
install.packages("asciicast", dependencies = TRUE)
# if you don't have it
install.packages("asciicast", dependencies = TRUE)
# if you don't have it
install.packages("processx", dependencies = TRUE)
# if you don't have it
install.packages("ascii-cast", dependencies = TRUE)
# if you don't have it
install.packages("devtools", dependencies = TRUE)
# if you don't have it
install.packages("callr", dependencies = TRUE)
# if you don't have it
install.packages("devtools", dependencies = TRUE)
# if you don't have it
install.packages("pkgload", dependencies = TRUE)
# if you don't have it
install.packages("devtools", dependencies = TRUE)
# install gggenomes
devtools::install_github("thackl/gggenomes")
source("~/bin/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
# Function to check if a package is installed, and if not, install it.
package_install <- function(package_name) {
if (requireNamespace(package_name, quietly = TRUE)) {
library(package_name, character.only = TRUE)
} else {
print(sprintf("%s %s", package_name, "is not installed. Installing it!"))
is_available <- BiocManager::available(package_name)
if (any(is_available == "TRUE")) {
BiocManager::install(package_name, dependencies = TRUE, update = TRUE)
} else {
install.packages(package_name, dependencies = TRUE, ask = FALSE, reinstall = TRUE)
}
}
}
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
# Function to check if a package is installed, and if not, install it.
package_install <- function(package_name) {
if (requireNamespace(package_name, quietly = TRUE)) {
library(package_name, character.only = TRUE)
} else {
print(sprintf("%s %s", package_name, "is not installed. Installing it!"))
is_available <- BiocManager::available(package_name)
if ( any(is_available) == TRUE ) {
BiocManager::install(package_name, dependencies = TRUE, update = TRUE)
} else {
install.packages(package_name, dependencies = TRUE, ask = FALSE, force = TRUE, reinstall = TRUE)
}
}
}
# Load required packages or install them if necessary
dependencies <- c("ape", "phytools", "treeio", "TreeTools", "ggstar",
"ggtree", "ggplot2", "dplyr", "stringi", "stringr")
for (pkg in dependencies) {
package_install(pkg)
}
BiocManager::install(package_name, dependencies = TRUE, character.only = TRUE, update = TRUE)
# Function to check if a package is installed, and if not, install it.
package_install <- function(package_name) {
if (requireNamespace(package_name, quietly = TRUE)) {
library(package_name, character.only = TRUE)
} else {
print(sprintf("%s %s", package_name, "is not installed. Installing it!"))
is_available <- BiocManager::available(package_name)
if ( any(is_available) == TRUE ) {
BiocManager::install(package_name, dependencies = TRUE, character.only = TRUE, update = TRUE)
} else {
install.packages(package_name, dependencies = TRUE, ask = FALSE, force = TRUE, reinstall = TRUE)
}
}
}
# Load required packages or install them if necessary
dependencies <- c("ape", "phytools", "treeio", "TreeTools", "ggstar",
"ggtree", "ggplot2", "dplyr", "stringi", "stringr")
for (pkg in dependencies) {
package_install(pkg)
}
# Function to check if a package is installed, and if not, install it.
package_install <- function(package_name) {
if (requireNamespace(package_name, quietly = TRUE)) {
library(package_name, character.only = TRUE)
} else {
print(sprintf("%s %s", package_name, "is not installed. Installing it!"))
is_available <- tryCatch(
BiocManager::available(package_name),
error = function(e) FALSE
)
if ( any(is_available) ) {
BiocManager::install(package_name, dependencies = TRUE, character.only = TRUE, update = TRUE)
} else {
install.packages(package_name, dependencies = TRUE, ask = FALSE, force = TRUE, reinstall = TRUE)
}
}
}
# Load required packages or install them if necessary
dependencies <- c("ape", "phytools", "treeio", "TreeTools", "ggstar",
"ggtree", "ggplot2", "dplyr", "stringi", "stringr")
for (pkg in dependencies) {
package_install(pkg)
}
# Function to check if a package is installed, and if not, install it.
package_install <- function(package_name) {
if (requireNamespace(package_name, quietly = TRUE)) {
library(package_name, character.only = TRUE)
} else {
print(sprintf("%s %s", package_name, "is not installed. Installing it!"))
is_available <- tryCatch(
BiocManager::available(package_name),
error = function(e) FALSE
)
if ( any(is_available) == TRUE ) {
BiocManager::install(package_name, dependencies = TRUE, character.only = TRUE, update = TRUE)
} else {
install.packages(package_name, dependencies = TRUE, ask = FALSE, force = TRUE, reinstall = TRUE)
}
}
}
# Load required packages or install them if necessary
dependencies <- c("ape", "phytools", "treeio", "TreeTools", "ggstar",
"ggtree", "ggplot2", "dplyr", "stringi", "stringr")
for (pkg in dependencies) {
package_install(pkg)
}
if (requireNamespace(package_name, quietly = TRUE)) {
library(package_name, character.only = TRUE)
} else {
print(sprintf("%s %s", package_name, "is not installed. Installing it!"))
is_available <- tryCatch(
BiocManager::available(package_name),
error = function(e) character(0)
)
if ( length(is_available) > 0 ) {
BiocManager::install(package_name, dependencies = TRUE, character.only = TRUE, update = TRUE)
} else {
install.packages(package_name, dependencies = TRUE, ask = FALSE, force = TRUE, repos = "https://cloud.r-project.org")
}
}
# Function to check if a package is installed, and if not, install it.
package_install <- function(package_name) {
if (requireNamespace(package_name, quietly = TRUE)) {
library(package_name, character.only = TRUE)
} else {
print(sprintf("%s %s", package_name, "is not installed. Installing it!"))
is_available <- tryCatch(
BiocManager::available(package_name),
error = function(e) character(0)
)
if ( length(is_available) > 0 ) {
BiocManager::install(package_name, dependencies = TRUE, character.only = TRUE, update = TRUE)
} else {
install.packages(package_name, dependencies = TRUE, ask = FALSE, force = TRUE, repos = "https://cloud.r-project.org")
}
}
}
# Function to check if a package is installed, and if not, install it.
package_install <- function(package_name) {
if (requireNamespace(package_name, quietly = TRUE)) {
library(package_name, character.only = TRUE)
} else {
print(sprintf("%s %s", package_name, "is not installed. Installing it!"))
is_available <- tryCatch(
BiocManager::available(package_name),
error = function(e) character(0)
)
if ( length(is_available) > 0 ) {
BiocManager::install(package_name, dependencies = TRUE, character.only = TRUE, update = TRUE)
} else {
install.packages(package_name, dependencies = TRUE, ask = FALSE, force = TRUE, repos = "https://cloud.r-project.org")
}
}
}
# Load required packages or install them if necessary
dependencies <- c("ape", "phytools", "treeio", "TreeTools", "ggstar",
"ggtree", "ggplot2", "dplyr", "stringi", "stringr")
for (pkg in dependencies) {
package_install(pkg)
}
for (pkg in dependencies) {
package_install(pkg)
}
# Function to find and install previous versions of installed packages
find_previous_versions <- function(dependencies) {
tmp <- as.data.frame(installed.packages())
max_version <- max(as.numeric(substr(tmp$Built, 1, 1)))
tmp <- tmp[as.numeric(substr(tmp$Built, 1, 1)) == max_version, ]
print (tmp)
}
# Function to check if a package is installed, and if not, install it.
# Function to install or load a package
package_install <- function(package_name) {
if (requireNamespace(package_name, quietly = TRUE)) {
library(package_name, character.only = TRUE)
} else {
print(sprintf("%s %s", package_name, "is not installed. Installing it!"))
is_available <- BiocManager::available(package_name)
if (any(is_available == "TRUE")) {
BiocManager::install(package_name, dependencies = TRUE, update = TRUE)
} else {
install.packages(package_name, dependencies = TRUE, ask = FALSE, reinstall = TRUE)
}
}
}
# Function to find and install previous versions of installed packages
find_previous_versions <- function(dependencies) {
tmp <- as.data.frame(installed.packages())
max_version <- max(as.numeric(substr(tmp$Built, 1, 1)))
tmp <- tmp[as.numeric(substr(tmp$Built, 1, 1)) == max_version, ]
print (tmp)
}
find_previous_versions()
# Function to find and install previous versions of installed packages
find_previous_versions <- function( tools ) {
tmp <- as.data.frame(installed.packages())
max_version <- max(as.numeric(substr(tmp$Built, 1, 1)))
tmp <- tmp[as.numeric(substr(tmp$Built, 1, 1)) == max_version, ]
if ( is.vector(tools) == TRUE ) {
for ( pkg in tools ) {
if (!( pkg %in% tmp$Package)) {
install.packages(pkg)
}
}
}
else if ( is.character(tools) == TRUE ) {
if ( !( pkg %in% tmp$Package) ) {
install.packages(pkg)
}
}
else {
print (tools, "is neither a vector nor a string. Function will stop")
continue
}
}
# List of required packages
dependencies <- c("ape", "phytools", "treeio", "TreeTools", "ggstar",
"ggtree", "ggplot2", "dplyr", "stringi", "stringr")
find_previous_versions(dependencies)
#Library of functions for advanced tree manipulation and visualization using ggtree, ape, phytools, and other related tools.
# Function to check if a package is installed, and if not, install it.
# Function to install or load a package
package_install <- function(package_name) {
if (requireNamespace(package_name, quietly = TRUE)) {
library(package_name, character.only = TRUE)
} else {
print(sprintf("%s %s", package_name, "is not installed. Installing it!"))
is_available <- BiocManager::available(package_name)
if (any(is_available == "TRUE")) {
BiocManager::install(package_name, dependencies = TRUE, update = TRUE)
} else {
install.packages(package_name, dependencies = TRUE, ask = FALSE, reinstall = TRUE)
}
}
}
# Function to find and install previous versions of installed packages
find_previous_versions <- function( tools ) {
tmp <- as.data.frame(installed.packages())
max_version <- max(as.numeric(substr(tmp$Built, 1, 1)))
tmp <- tmp[as.numeric(substr(tmp$Built, 1, 1)) == max_version, ]
if ( is.vector(tools) == TRUE ) {
for ( pkg in tools ) {
if (!( pkg %in% tmp$Package)) {
install.packages(pkg)
}
}
}
else if ( is.character(tools) == TRUE ) {
if ( !( pkg %in% tmp$Package) ) {
install.packages(pkg)
}
}
else {
print (tools, "is neither a vector nor a string. Function will stop")
continue
}
}
# List of required packages
dependencies <- c("ape", "phytools", "treeio", "TreeTools", "ggstar",
"ggtree", "ggplot2", "dplyr", "stringi", "stringr")
find_previous_versions(dependencies)
find_previous_versions(dependencies)
find_previous_versions(dependencies)
# Get a list of installed packages
installed_packages <- rownames(installed.packages())
# Reinstall all packages
install.packages(installed_packages, dependencies = TRUE, type = "binary")
install.packages(installed_packages, dependencies = TRUE, type = "binary")
install.packages(installed_packages, dependencies = TRUE, type = "binary")
install.packages(installed_packages, dependencies = TRUE, type = "binary")
# Reinstall all packages
install.packages(installed_packages, dependencies = TRUE)
install.packages(installed_packages, dependencies = TRUE)
install.packages(installed_packages, dependencies = TRUE)
install.packages(optimParallel, dependencies = TRUE)
install.packages('optimParallel', dependencies = TRUE)
quit()
if (!requireNamespace("devtools", quietly=TRUE))
install.packages("devtools")
devtools::install_github("xiangpin/ggstar")
exit()
quit()
BiocManager::install("treeplyr")
exit()
quit()
install.packages("Roxygen2")
install.packages("roxygen2")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
library("roxygen2")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
roxygen2::roxygenise()
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
setwd("~/bin/OliveTrees/OliveTree")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
roxygen2::roxygenise()
devtools::document()
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
unlink("man", recursive = TRUE)
roxygen2::roxygenise("OliveTree.R")
roxygen2::roxygenise("OliveTree.R")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
roxygen2::roxygenise("OliveTree")
roxygen2::roxygenise(".")
source("~/bin/OliveTrees/OliveTree/OliveTree.R")
